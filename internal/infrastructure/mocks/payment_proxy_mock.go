// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/payment/payment_proxy.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/payment/payment_proxy.go -destination=internal/infrastructure/mocks/payment_proxy_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain_payment_core "github.com/vaynedu/ddd_order_example/internal/domain/domain_payment_core"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentProxy is a mock of PaymentProxy interface.
type MockPaymentProxy struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentProxyMockRecorder
	isgomock struct{}
}

// MockPaymentProxyMockRecorder is the mock recorder for MockPaymentProxy.
type MockPaymentProxyMockRecorder struct {
	mock *MockPaymentProxy
}

// NewMockPaymentProxy creates a new mock instance.
func NewMockPaymentProxy(ctrl *gomock.Controller) *MockPaymentProxy {
	mock := &MockPaymentProxy{ctrl: ctrl}
	mock.recorder = &MockPaymentProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentProxy) EXPECT() *MockPaymentProxyMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentProxy) CreatePayment(ctx context.Context, orderID string, amount int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, orderID, amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentProxyMockRecorder) CreatePayment(ctx, orderID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentProxy)(nil).CreatePayment), ctx, orderID, amount)
}

// QueryPaymentStatus mocks base method.
func (m *MockPaymentProxy) QueryPaymentStatus(ctx context.Context, paymentID string) (domain_payment_core.PaymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPaymentStatus", ctx, paymentID)
	ret0, _ := ret[0].(domain_payment_core.PaymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPaymentStatus indicates an expected call of QueryPaymentStatus.
func (mr *MockPaymentProxyMockRecorder) QueryPaymentStatus(ctx, paymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPaymentStatus", reflect.TypeOf((*MockPaymentProxy)(nil).QueryPaymentStatus), ctx, paymentID)
}
