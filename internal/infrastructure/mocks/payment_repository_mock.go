// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/domain_payment_core/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/domain_payment_core/repository.go -destination=internal/infrastructure/mocks/payment_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain_payment_core "github.com/vaynedu/ddd_order_example/internal/domain/domain_payment_core"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockRepository) FindByID(ctx context.Context, id string) (*domain_payment_core.PaymentDO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain_payment_core.PaymentDO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepository)(nil).FindByID), ctx, id)
}

// FindByOrderID mocks base method.
func (m *MockRepository) FindByOrderID(ctx context.Context, orderID string) (*domain_payment_core.PaymentDO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrderID", ctx, orderID)
	ret0, _ := ret[0].(*domain_payment_core.PaymentDO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOrderID indicates an expected call of FindByOrderID.
func (mr *MockRepositoryMockRecorder) FindByOrderID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrderID", reflect.TypeOf((*MockRepository)(nil).FindByOrderID), ctx, orderID)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, payment *domain_payment_core.PaymentDO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, payment)
}
