// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/domain_product_core/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/domain_product_core/service.go -destination=internal/infrastructure/mocks/product_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain_product_core "github.com/vaynedu/ddd_order_example/internal/domain/domain_product_core"
	gomock "go.uber.org/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
	isgomock struct{}
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// ValidateProduct mocks base method.
func (m *MockProductService) ValidateProduct(ctx context.Context, req *domain_product_core.ValidateProductRequest) (*domain_product_core.ValidateProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProduct", ctx, req)
	ret0, _ := ret[0].(*domain_product_core.ValidateProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProduct indicates an expected call of ValidateProduct.
func (mr *MockProductServiceMockRecorder) ValidateProduct(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProduct", reflect.TypeOf((*MockProductService)(nil).ValidateProduct), ctx, req)
}
